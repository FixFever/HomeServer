version: '3.5'

# Start    | docker-compose up -d
# Stop     | docker-compose stop
# Update   | docker-compose pull
# Logs     | docker-compose logs --tail=25 -f
# Terminal | docker-compose exec photoprism bash
# Help     | docker-compose exec photoprism photoprism help
# Config   | docker-compose exec photoprism photoprism config
# Reset    | docker-compose exec photoprism photoprism reset
# Backup   | docker-compose exec photoprism photoprism backup -a -i
# Restore  | docker-compose exec photoprism photoprism restore -a -i
# Index    | docker-compose exec photoprism photoprism index
# Reindex  | docker-compose exec photoprism photoprism index -f
# Import   | docker-compose exec photoprism photoprism import

services:

  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - C:\\docker-volumes\postgres:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - C:\\docker-volumes\redis:/data
    restart: unless-stopped

  nextcloud:
    image: nextcloud:25
    container_name: nextcloud
    ports:
      - 5000:80
    environment:
      - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    volumes:
      - C:\\docker-volumes\nextcloud\html:/var/www/html
      - C:\\docker-volumes\nextcloud\php:/usr/local/etc/php
      - C:\\docker-caches\nextcloud\preview:/var/www/html/data/appdata_ocah283m7og5/preview
      - M:\\nextcloud\FixFever:/var/www/html/data/FixFever/files
      - M:\\nextcloud\Elya:/var/www/html/data/Elya/files
      - M:\\nextcloud\Boris:/var/www/html/data/Boris/files
      - M:\\nextcloud\Marina:/var/www/html/data/Marina/files
    restart: unless-stopped
    
  # nextcloud2:
    # image: nextcloud
    # container_name: nextcloud2
    # ports:
      # - 5001:80
    # environment:
      # - POSTGRES_HOST=host.docker.internal:5432
      # - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}2
      # - POSTGRES_USER=${POSTGRES_USER}
      # - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      # - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      # - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      # - REDIS_HOST=redis
    # depends_on:
      # - postgres
      # - redis
    # volumes:
      # - C:\\docker-volumes\nextcloud2:/var/www/html
      # - M:\\nextcloud\FixFever:/var/www/html/data/FixFever/files

  nextcloud_cron:
    image: nextcloud:25
    container_name: nextcloud_cron
    volumes_from:
      - nextcloud:rw
    entrypoint: /cron.sh
    user: 0:0
    depends_on:
      - postgres
    restart: unless-stopped
    
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - 5050:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    volumes:
      - C:\\docker-volumes\pgAdmin:/var/lib/pgadmin
    restart: unless-stopped
    
  photoprism:
    image: photoprism/photoprism:latest
    container_name: photoprism
    depends_on:
      - mariadb
    
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - 2342:2342
    environment:
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD}          
      PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
      PHOTOPRISM_SITE_URL: "https://photoprism.fixfever.keenetic.pro/"  # public server URL incl http:// or https:// and /path, :port is optional
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_READONLY: "true"                    # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "true"              # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "true"            # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW files
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW files (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: 85                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      PHOTOPRISM_DETECT_NSFW: "true"                 # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: mariadb:3306     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: ${MARIADB_USER}         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: ${MARIADB_PASSWORD}       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      PHOTOPRISM_WORKERS: 6                          # maximum NUMBER of indexing workers, default depends on the number of physical cores
    working_dir: "/photoprism" # do not change or remove
    volumes:
      - C:\\docker-volumes\photoprism:/photoprism
      - C:\\docker-caches\photoprism\cache:/photoprism/storage/cache
      - C:\\docker-caches\photoprism\sidecar:/photoprism/storage/sidecar
      - M:\\nextcloud\FixFever\Фото:/photoprism/originals
      # "/host/folder:/photoprism/folder"                # Example
      #- "~/Pictures:/photoprism/originals"               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      #- "./storage:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
    restart: unless-stopped

  mariadb:
    image: mariadb:10.8
    container_name: mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    volumes:
      - C:\\docker-volumes\mariadb:/var/lib/mysql
    environment:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_DATABASE: "photoprism"
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${MARIADB_PASSWORD}
    restart: unless-stopped
    
  quake:
    image: 'treyyoder/quakejs:latest'
    container_name: quake
    ports:
      - '8081:80'
      - '27960:27960'
    environment:
      - HTTP_PORT=8081
    volumes:
      - C:\\docker-volumes\quake:/quakejs/base
    restart: unless-stopped 
    
  valheim: 
    image: 'ghcr.io/lloesche/valheim-server:latest'
    container_name: valheim
    cap_add:
      - sys_nice
    ports: 
      - "2456-2457:2456-2457/udp"
      - "9001:9001/tcp"
    volumes: 
      - C:\docker-volumes\valheim:/config
      - C:\backups\valheim:/config/backups
    env_file:
      - C:\docker-volumes\valheim\valheim.env
    stop_grace_period: 2m
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    volumes:
      - C:\docker-volumes\prometheus:/etc/prometheus
      - C:\docker-volumes\prometheus\data:/prometheus
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default
    restart: unless-stopped
    
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    volumes:
      - C:\docker-volumes\grafana:/var/lib/grafana
      - C:\docker-volumes\grafana\provisioning/:/etc/grafana/provisioning/
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - default
    restart: unless-stopped
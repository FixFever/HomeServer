services:
    
  caddy_gen:
    container_name: caddy_gen
    image: wemakeservices/caddy-gen:latest
    network_mode: host
    environment:
      CADDY_SNIPPET: /etc/caddy/caddy.snippet
    depends_on:
      - homepage
      - nextcloud
      - pgadmin
      - photoprism
      - prometheus
      - grafana
      - secret
      - vault
      - gokapi
      - kerberos
      - restreamer
      - chrome
      - notes
      - notes_api
      - cobalt
      - cobalt_api
      - speedtest
      - it-tools
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro # needs socket to read events
      - caddy_data:/data
      - caddy_etc:/etc/caddy
      - caddy_config:/config
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: Caddy
      homepage.icon: caddy.png
      homepage.widget.type: caddy
      homepage.widget.url: http://host.docker.internal:2019
      
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: Watchtower
      homepage.icon: watchtower.png
      
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    ports:
      - 3005:3000
    volumes:
      - homepage:/app/config
      - homepage_images:/app/public/images
      - homepage_icons:/app/public/icons
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    labels:
      virtual.host: ${DOMAIN}
      virtual.port: 3000
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Containers
      homepage.name: Homepage
      homepage.icon: homepage.png
      
# For update: docker-compose build nextcloud
  nextcloud:
    build:
      context: ./nextcloud/
      args:
        NEXTCLOUD_IMAGE: nextcloud:29
    container_name: nextcloud
    ports:
      - 5000:80
    environment:
      - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - REDIS_HOST=host.docker.internal
      - PHP_MEMORY_LIMIT=3072M
      - APACHE_BODY_LIMIT=0
    depends_on:
      - postgres
      - redis
    volumes:
      - nextcloud_html:/var/www/html
      - nextcloud_php:/usr/local/etc/php
      - C:\\docker-caches\nextcloud\preview:/var/www/html/data/appdata_ocah283m7og5/preview
      - M:\\nextcloud\FixFever:/var/www/html/data/FixFever/files
      - M:\\nextcloud\Elya:/var/www/html/data/Elya/files
      - M:\\nextcloud\Boris:/var/www/html/data/Boris/files
      - M:\\nextcloud\Marina:/var/www/html/data/Marina/files
      - M:\\nextcloud\Alexey:/var/www/html/data/Alexey/files
      - M:\\nextcloud\Lada:/var/www/html/data/Lada/files
      - M:\\nextcloud\trashbin\FixFever:/var/www/html/data/FixFever/files_trashbin/files
      - M:\\nextcloud\trashbin\Elya:/var/www/html/data/Elya/files_trashbin/files
      - M:\\nextcloud\trashbin\Boris:/var/www/html/data/Boris/files_trashbin/files
      - M:\\nextcloud\trashbin\Marina:/var/www/html/data/Marina/files_trashbin/files
      - M:\\nextcloud\trashbin\Alexey:/var/www/html/data/Alexey/files_trashbin/files
      - M:\\nextcloud\trashbin\Lada:/var/www/html/data/Lada/files_trashbin/files
    restart: unless-stopped
    labels:
      virtual.host: nextcloud.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Cloud
      homepage.name: Nextcloud
      homepage.icon: nextcloud.png
      homepage.href: https://nextcloud.${DOMAIN}
      homepage.description: File-hosting service
      homepage.widget.type: nextcloud
      homepage.widget.url: http://host.docker.internal:5000
      homepage.widget.username: ${NEXTCLOUD_ADMIN_USER}
      homepage.widget.password: ${NEXTCLOUD_ADMIN_PASSWORD}

  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: PostgreSQL
      homepage.icon: postgres.png

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: Redis
      homepage.icon: redis.png
    
  nextcloud_cron:
    image: nextcloud:29
    container_name: nextcloud_cron
    volumes_from:
      - nextcloud:rw
    entrypoint: /cron.sh
    user: 0:0
    depends_on:
      - postgres
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: Nextcloud cron
      homepage.icon: nextcloud.png
    
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - 5050:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - POSTGRES_DB=${NEXTCLOUD_POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - postgres
    volumes:
      - pgadmin:/var/lib/pgadmin
    restart: unless-stopped
    labels:
      virtual.host: pgadmin.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: pgAdmin
      homepage.icon: pgadmin.png
      homepage.href: https://pgadmin.${DOMAIN}
      homepage.description: PostgreSQL management tool
      
# Terminal | docker-compose exec photoprism bash
# Help     | docker-compose exec photoprism photoprism help
# Config   | docker-compose exec photoprism photoprism config
# Reset    | docker-compose exec photoprism photoprism reset
# Backup   | docker-compose exec photoprism photoprism backup -a -i
# Restore  | docker-compose exec photoprism photoprism restore -a -i
# Index    | docker-compose exec photoprism photoprism index
# Reindex  | docker-compose exec photoprism photoprism index -f
# Import   | docker-compose exec photoprism photoprism import
  photoprism:
    image: photoprism/photoprism:latest
    container_name: photoprism
    depends_on:
      - mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ports:
      - 2342:2342
    environment:
      PHOTOPRISM_ADMIN_USER: ${PHOTOPRISM_ADMIN_USER}
      PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD}        
      PHOTOPRISM_AUTH_MODE: "password"               
      PHOTOPRISM_SESSION_MAXAGE: -1
      PHOTOPRISM_SESSION_TIMEOUT: -1
      PHOTOPRISM_SITE_URL: https://photoprism.${DOMAIN}  # public server URL incl http:// or https:// and /path, :port is optional
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_READONLY: "true"                    # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "true"              # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"            # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW files
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW files (reduces performance)
      PHOTOPRISM_JPEG_QUALITY: 85                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
      PHOTOPRISM_DETECT_NSFW: "true"                 # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
      PHOTOPRISM_DATABASE_SERVER: mariadb:3306     # MariaDB or MySQL database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB or MySQL database schema name
      PHOTOPRISM_DATABASE_USER: ${MARIADB_USER}         # MariaDB or MySQL database user name
      PHOTOPRISM_DATABASE_PASSWORD: ${MARIADB_PASSWORD}       # MariaDB or MySQL database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      PHOTOPRISM_WORKERS: 6                          # maximum NUMBER of indexing workers, default depends on the number of physical cores
    working_dir: "/photoprism" # do not change or remove
    volumes:
      - photoprism:/photoprism
      - C:\\docker-caches\photoprism\cache:/photoprism/storage/cache
      - C:\\docker-caches\photoprism\sidecar:/photoprism/storage/sidecar
      - M:\\nextcloud\FixFever\Фото:/photoprism/originals
      # "/host/folder:/photoprism/folder"                # Example
      #- "~/Pictures:/photoprism/originals"               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      #- "./storage:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
    restart: unless-stopped
    labels:
      virtual.host: photoprism.${DOMAIN}
      virtual.port: 2342
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Cloud
      homepage.name: Photoprism
      homepage.icon: photoprism.png
      homepage.href: https://photoprism.${DOMAIN}
      homepage.description: AI-Powered Photos App      
      homepage.widget.type: photoprism
      homepage.widget.url: http://host.docker.internal:2342
      homepage.widget.username: ${PHOTOPRISM_ADMIN_USER}
      homepage.widget.password: ${PHOTOPRISM_ADMIN_PASSWORD}

  mariadb:
    image: mariadb:10.8
    container_name: mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    command: mysqld --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    volumes:
      - mariadb:/var/lib/mysql
    environment:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MARIADB_DATABASE: "photoprism"
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${MARIADB_PASSWORD}
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: MariaDB
      homepage.icon: mariadb.png
      
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - '--storage.tsdb.retention.time=3y'
    ports:
      - 9090:9090
    volumes:
      - prometheus_etc:/etc/prometheus
      - H:\docker-volumes\prometheus:/prometheus
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default
    restart: unless-stopped
    labels:
      virtual.host: prometheus.${DOMAIN}
      virtual.port: 9090
      virtual.tls-email: ${TLS_EMAIL}
      virtual.auth.username: ${PROMETHEUS_USERNAME}
      virtual.auth.password: ${PROMETHEUS_PASSWORD}
      homepage.group: Monitoring
      homepage.name: Prometheus
      homepage.icon: prometheus.png
      homepage.href: https://prometheus.${DOMAIN}
      homepage.description: Monitoring
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    volumes:
      - grafana_lib:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning/
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    networks:
      - default
    restart: unless-stopped
    labels:
      virtual.host: grafana.${DOMAIN}
      virtual.port: 3000
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Monitoring
      homepage.name: Grafana
      homepage.icon: grafana.png
      homepage.href: https://grafana.${DOMAIN}
      homepage.description: Data visualization & Monitoring
      # homepage.widget.type: grafana
      # homepage.widget.url: http://host.docker.internal:3000
      # homepage.widget.username: ${GRAFANA_ADMIN_USER}
      # homepage.widget.password: ${GRAFANA_ADMIN_PASSWORD}
      
  secret:
    image: ghcr.io/tethik/burn-after-reading/burn-after-reading:1.5.1
    container_name: secret
    ports:
      - 5035:80
    volumes:
      - secret:/opt/data
    environment:     
      - MAX_CONTENT_LENGTH=134217728
      - BURN_DATA_PATH=/opt/data/
      - BURN_MAX_STORAGE=1024
    restart: unless-stopped
    labels:
      virtual.host: secret.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: Burn after reading
      homepage.icon: https://secret.${DOMAIN}/static/flame.png
      homepage.href: https://secret.${DOMAIN}
      homepage.description: Share short term messages stored in memory
      
  vault:
    image: vaultwarden/server:latest
    container_name: vault
    ports:
      - "3012:3012"
      - "8282:80"
    volumes:
      - vault:/data
    environment:
      - WEBSOCKET_ENABLED=true
      - LOG_FILE=/data/logs.txt
      - ADMIN_TOKEN=${VAULT_ADMIN_TOKEN}
      - DOMAIN=https://vault.${DOMAIN}
      - SIGNUPS_ALLOWED=true
    restart: unless-stopped
    labels:
      virtual.host: vault.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Cloud
      homepage.name: Vaultwarden
      homepage.icon: vaultwarden.png
      homepage.href: https://vault.${DOMAIN}
      homepage.description: Password management
      
  gokapi:
    image: f0rc3/gokapi:latest
    container_name: gokapi
    ports:
      - 8083:53842
    volumes:
      - gokapi_config:/app/config
      - gokapi_data:/app/data
    restart: unless-stopped
    labels:
      virtual.host: gokapi.${DOMAIN}
      virtual.port: 53842
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: Gokapi
      homepage.icon: /icons/gokapi.png
      homepage.href: https://gokapi.${DOMAIN}
      homepage.description: Share files
      
  kerberos:
    image: kerberos/agent:latest
    container_name: kerberos
    ports:
      - 8082:80
    environment:
      AGENT_USERNAME: ${KERBEROS_USERNAME}
      AGENT_PASSWORD: ${KERBEROS_PASSWORD}
    volumes:
      - kerberos_config:/home/agent/data/config
      - H:\kerberos:/home/agent/data/recordings
    restart: unless-stopped
    labels:
      virtual.host: kerberos.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: CCTV
      homepage.name: Kerberos agent
      homepage.icon: kerberos.png
      homepage.href: https://kerberos.${DOMAIN}
      homepage.description: Video management
      
  restreamer:
    image: datarhei/restreamer:latest
    container_name: restreamer
    ports:
      - 8084:8080
    volumes:
      - restreamer_config:/core/config
      - restreamer_data:/core/data
    restart: unless-stopped
    labels:
      virtual.host: restreamer.${DOMAIN}
      virtual.port: 8080
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: CCTV
      homepage.name: Resteamer
      homepage.icon: /icons/restreamer.svg
      homepage.href: https://restreamer.${DOMAIN}/ui
      homepage.description: Stream service
      
  chrome:
    image: vital987/chrome-novnc:latest
    container_name: chrome
    ports:
      - 9870:9870
    environment:
      PORT: 9870
      VNC_PASS: ${CHROME_PASSWORD}
    restart: unless-stopped
    labels:
      virtual.host: chrome.${DOMAIN}
      virtual.port: 9870
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: Chrome
      homepage.icon: chrome.png
      homepage.href: https://chrome.${DOMAIN}
      homepage.description: Chrome noVNC

  notes:
    image: standardnotes/web:latest
    container_name: notes
    depends_on:
      - notes_api
    ports:
      - 3003:80
    volumes:
      - notes_html:/usr/share/nginx/html # Env var DEFAULT_SYNC_SERVER is not supported in web app docker image.
                                         # To change default url of standard notes api, in /usr/share/nginx/html/app.js:
                                         # replace
                                         # function(e){e.Api="https://api.standardnotes.com"
                                         # to
                                         # function(e){e.Api="https://your.notes.api.domain.com"
    restart: unless-stopped
    labels:
      virtual.host: notes.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Cloud
      homepage.name: Standard notes
      homepage.icon: https://notes.${DOMAIN}/favicon/apple-touch-icon.png
      homepage.href: https://notes.${DOMAIN}
      homepage.description: Note-taking app
      
  notes_api:
    image: standardnotes/server:latest
    container_name: notes_api
    depends_on:
      - localstack
      - mysql
    ports:
      - 3002:3000
      - 3125:3104
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=3306
      - DB_USERNAME=${NOTES_DB_USERNAME}
      - DB_PASSWORD=${NOTES_DB_PASSWORD}
      - DB_DATABASE=${NOTES_DB_NAME}
      - DB_TYPE=mysql
      - REDIS_PORT=6379
      - REDIS_HOST=host.docker.internal
      - CACHE_TYPE=redis
      - AUTH_JWT_SECRET=${NOTES_AUTH_JWT_SECRET}
      - AUTH_SERVER_ENCRYPTION_SERVER_KEY=${NOTES_AUTH_SERVER_ENCRYPTION_SERVER_KEY}
      - VALET_TOKEN_SECRET=${NOTES_VALET_TOKEN_SECRET}
      - DISABLE_USER_REGISTRATION=true
      - COOKIE_DOMAIN=api.notes.${DOMAIN}
    volumes:
      - notes_logs:/var/lib/server/logs
      - notes_uploads:/opt/server/packages/files/dist/uploads
    restart: unless-stopped
    labels:
      virtual.host: api.notes.${DOMAIN}
      virtual.port: 3000
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Containers
      homepage.name: Standard notes api
      homepage.icon: https://notes.${DOMAIN}/favicon/apple-touch-icon.png
      
  localstack:
    image: localstack/localstack:3.0
    container_name: localstack
    expose:
      - 4566
    environment:
      - SERVICES=sns,sqs
      - HOSTNAME_EXTERNAL=localstack
      - LS_LOG=warn
    restart: unless-stopped
    volumes:
      - localstack:/var/lib/localstack
      - localstack_etc:/etc/localstack/init/ready.d # chmod +x /etc/localstack/init/ready.d/localstack_bootstrap.sh
    labels:
      homepage.group: Containers
      homepage.name: Localstack
      homepage.icon: /icons/localstack.png

  mysql:
    image: mysql
    container_name: mysql
    environment:
      - MYSQL_DATABASE=${NOTES_DB_NAME}
      - MYSQL_USER=${NOTES_DB_USERNAME}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${NOTES_DB_PASSWORD}
    ports:
      - 3306:3306
    volumes:
      - mysql:/var/lib/mysql
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: MySQL
      homepage.icon: mysql.png
      
  valheim:
    image: ghcr.io/lloesche/valheim-server:latest
    container_name: valheim
    cap_add:
      - sys_nice
    ports: 
      - "2458-2459:2458-2459/udp" # default ports 2456-2457
      - "9001:9001/tcp"
    volumes: 
      - valheim:/config
      - H:\backups\valheim:/config/backups
    env_file:
      - C:\Users\FixFever\Documents\valheim.env
    stop_grace_period: 2m
    restart: unless-stopped
    labels:
      homepage.group: Containers
      homepage.name: Valheim
      homepage.icon: https://valheimgame.com/favicon.ico
      homepage.widget.type: customapi
      homepage.widget.url: http://host.docker.internal:9001/status.json
      homepage.widget.mappings[0].field: server_name
      homepage.widget.mappings[0].label: Server name
      homepage.widget.mappings[0].format: text
      homepage.widget.mappings[1].field: player_count
      homepage.widget.mappings[1].label: Players online
      homepage.widget.mappings[1].format: text
      
  cobalt_api:
    image: ghcr.io/imputnet/cobalt:latest
    container_name: cobalt_api
    ports:
      - 9002:9000/tcp
    volumes: 
      # youtube download fix: 
      # Add cookie to the youtube_oauth array in cookies.json file
      # cd cobalt
      # npm install
      # npm run token:youtube
      # And fix /app/src/modules/processing/services/youtube.js:
      # change `info = await yt.getBasicInfo(o.id, yt.session.logged_in ? 'ANDROID' : 'IOS');`
      # to     `info = await yt.getBasicInfo(o.id, 'ANDROID');`
      # I dont know why, but it works
      # manual: https://github.com/imputnet/cobalt/blob/main/docs/configure-for-youtube.md
      - cobalt_api_cookies:/cookies
      - cobalt_api_services:/app/src/modules/processing/services 
    environment:
      - API_URL=https://api.cobalt.${DOMAIN}/
      - RATELIMIT_WINDOW=21600
      - RATELIMIT_MAX=1000
      - DURATION_LIMIT=21600
      - COOKIE_PATH=cookies/cookies.json
    restart: unless-stopped
    labels:
      virtual.host: api.cobalt.${DOMAIN}
      virtual.port: 9000
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Containers
      homepage.name: Cobalt api
      homepage.icon: https://cobalt.${DOMAIN}/favicon.png
      
  cobalt:
    container_name: cobalt
    build:
      context: /..
      dockerfile: server/cobalt/Dockerfile
      args:
        - WEB_URL=https://cobalt.${DOMAIN}/
        - WEB_DEFAULT_API=https://api.cobalt.${DOMAIN}
    ports:
      - 9003:8080/tcp
    restart: unless-stopped
    labels:
      virtual.host: cobalt.${DOMAIN}
      virtual.port: 8080
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: Cobalt
      homepage.icon: https://cobalt.${DOMAIN}/favicon.png
      homepage.href: https://cobalt.${DOMAIN}
      homepage.description: Media downloader
      
  speedtest:
    image: ghcr.io/librespeed/speedtest:latest
    container_name: speedtest
    ports:
      - 5444:80
    environment:
      - MODE=standalone
    restart: unless-stopped
    labels:
      virtual.host: speedtest.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: LibreSpeed
      homepage.icon: librespeed.png
      homepage.href: https://speedtest.${DOMAIN}
      homepage.description: Speed test
      
  it-tools:
    image: corentinth/it-tools:latest
    container_name: it-tools
    ports:
      - 5445:80
    restart: unless-stopped
    labels:
      virtual.host: it-tools.${DOMAIN}
      virtual.port: 80
      virtual.tls-email: ${TLS_EMAIL}
      homepage.group: Utilities
      homepage.name: IT-tools
      homepage.icon: it-tools.png
      homepage.href: https://it-tools.${DOMAIN}
      homepage.description: Useful tools for developer and people working in IT

volumes:

  caddy_config:
    external: true
  caddy_data:
    external: true
  caddy_etc:
    external: true
    
  homepage:
    external: true
  homepage_images:
    external: true
  homepage_icons:
    external: true
    
  nextcloud_html:
    external: true
  nextcloud_php:
    external: true
    
  postgres_data:
    external: true
    
  redis_data:
    external: true
    
  pgadmin:
    external: true
    
  photoprism:
    external: true
    
  mariadb:
    external: true
    
  prometheus_etc:
    external: true
    
  grafana_lib:
    external: true
  grafana_provisioning:
    external: true
    
  secret:
    external: true
    
  vault:
    external: true
    
  gokapi_config:
    external: true
  gokapi_data:
    external: true
    
  kerberos_config:
    external: true
    
  restreamer_config:
    external: true
  restreamer_data:
    external: true
    
  notes_html:
    external: true
  notes_logs:
    external: true
  notes_uploads:
    external: true
  localstack:
    external: true
  localstack_etc:
    external: true
  mysql:
    external: true
  mysql_import:
    external: true
        
  valheim:
    external: true
    
  cobalt_api_cookies:
    external: true
  cobalt_api_services:
    external: true